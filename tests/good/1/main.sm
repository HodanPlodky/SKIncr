(module Main imports (StdLib))

(vars (
  (let a 23)
  (let b 42)
  (let x (+ a b))
  (let z 0)
))


(functions (
  (function simpler ()
    (let a 23)
  )

  (function simple ()
    (begin
      (let a 23)
    )
  )

  (function main ()
    (begin
      (let a 23)
      (let c 42)
      (let b (foo a c)) # 42 - 23 = 19 ; 19 * 42 = 798
      (let ignore (foo a b)) # never used anyway
      (+ a b) # 23 + 798 = 821
    )
  )

  # if the first argument is smaller than the second argument
  # then consider the difference between them
  # and that many times multiply the second argument
  # that is what the `z` will be set to
  (function foo (f y)
    (begin
      (set! z 0) # resets the `z` to 0 each time `foo` is called
      (set! x f)
      # (let z 10) # the question is, should this be allowed?
      (while (< x y)
        (begin
          (set! z (+ y z))
          (let one 1)
          (set! x (+ x one))
        )
      )
      z
    )
  )
))
