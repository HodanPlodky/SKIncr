value class Label(label: Int) uses Orderable, Show {
  fun incr(): this {
    !this.label = this.label + 1;
    this
  }
  fun toString(): String {
    this.label.toString()
  }
}
class AbstractState<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  at: Label,
  atP: AD,
  af: Label,
  afP: AD,
  es: Bool,
  br: Label,
  brP: AD,
)

module AbstractInterpreter;

fun lfp<T>(a: T, f: T -> T, leq: (T, T) -> Bool, extrapolate: (T, T) -> T): T {
  fa = f(a);
  eq = (x, y) -> leq(x, y) && leq(y, x);
  aefa = extrapolate(a, fa);
  if (leq(fa, a) || eq(aefa, a)) fa else lfp(aefa, f, leq, extrapolate);
}

fun leq<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: Tree<AbstractState<AP, AD>>,
  y: Tree<AbstractState<AP, AD>>,
): Bool {
  (x, y) match {
  | (
    While(_b, _sb, AbstractState(_at, atP, _af, afP, _es, _br, brP)),
    While(_b_, _sb_, AbstractState(_at_, atP_, _af_, afP_, _es_, _br_, brP_)),
  ) ->
    atP <= atP_ && afP <= afP_ && brP <= brP_
  | (_, _) -> invariant_violation("abstractInterpreter: incorrect leq argument")
  }
}

fun widen<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: Tree<AbstractState<AP, AD>>,
  y: Tree<AbstractState<AP, AD>>,
): Tree<AbstractState<AP, AD>> {
  (x, y) match {
  | (
    While(_b, _sb, AbstractState(_at, atP, _af, _afP, _es, _br, _brP)),
    While(b_, sb_, AbstractState(at_, atP_, af_, afP_, es_, br_, brP_)),
  ) ->
    While(
      b_,
      sb_,
      AbstractState(at_, atP.widen(atP_), af_, afP_, es_, br_, brP_),
    )
  | _ -> invariant_violation("Invalid widen")
  }
}

fun narrow<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: Tree<AbstractState<AP, AD>>,
  y: Tree<AbstractState<AP, AD>>,
): Tree<AbstractState<AP, AD>> {
  (x, y) match {
  | (
    While(_b, _sb, AbstractState(_at, atP, _af, _afP, _es, _br, _brP)),
    While(b_, sb_, AbstractState(at_, atP_, af_, afP_, es_, br_, brP_)),
  ) ->
    While(
      b_,
      sb_,
      AbstractState(at_, atP.narrow(atP_), af_, afP_, es_, br_, brP_),
    )
  | _ -> invariant_violation("Invalid narrow")
  }
}

extension base class .Tree {
  fun fWhile<AP: AbstractProperty, AD: AbstractDomain<AP>>[
    T: AbstractState<AP, AD>,
  ](
    env: Env<AP, AD>,
    r0: AD,
  ): Tree<AbstractState<AP, AD>> {
    this match {
    | (While(b, sb, AbstractState(at, xl, af, _afP, es, br, _brP))) ->
      sb_ = sb.abstractInterpreter(env, b.test(env, xl));
      afP_ = sb_.property_after();
      brP_ = sb_.property_break();
      atP = r0.join(afP_);
      afP = b.nottest(env, atP).join(brP_);
      While(b, sb_, AbstractState(at, atP, af, afP, es, br, env.bot()))
    | _ -> invariant_violation("abstractInterpreter: incorrect fWhile argument")
    }
  }

  fun abstractInterpreter<AP: AbstractProperty, AD: AbstractDomain<AP>>[
    T: AbstractState<AP, AD>,
  ](
    env: Env<AP, AD>,
    r0: AD,
  ): Tree<AbstractState<AP, AD>> {
    this match {
    | Prog(sl, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      (sl_, atP_, afP_, _brP_) = static::abstractInterpreterStmtList(
        env,
        sl,
        r0,
      );
      Prog(sl_, AbstractState(at, atP_, af, afP_, es, br, env.bot()))

    | Assign(v, a, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      afP_ = r0.assign(env, v, a);
      Assign(v, a, AbstractState(at, r0, af, afP_, es, br, env.bot()))

    | EmptyStmt(AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      EmptyStmt(AbstractState(at, r0, af, r0, es, br, env.bot()))

    | If(b, st, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      st_ = st.abstractInterpreter(env, b.test(env, r0));
      afP_ = st_.property_after();
      brP_ = st_.property_break();
      afP__ = afP_.join(b.nottest(env, r0));
      If(b, st_, AbstractState(at, r0, af, afP__, es, br, brP_))

    | IfElse(b, st, se, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      st_ = st.abstractInterpreter(env, b.test(env, r0));
      se_ = se.abstractInterpreter(env, b.nottest(env, r0));
      afP_ = st_.property_after();
      brP_ = st_.property_break();
      afP__ = se_.property_after();
      brP__ = se_.property_break();
      afP___ = afP_.join(afP__);
      brP___ = brP_.join(brP__);
      IfElse(b, st_, se_, AbstractState(at, r0, af, afP___, es, br, brP___))

    | Break(AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      Break(AbstractState(at, r0, af, env.bot(), es, br, r0))

    | While(b, sb, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      wbot = (
        While(
          b,
          sb,
          AbstractState(at, env.bot(), af, env.bot(), es, br, env.bot()),
        )
      );
      fpu = lfp(wbot, x -> x.fWhile(env, r0), leq, widen);
      fpd = lfp(fpu, x -> x.fWhile(env, r0), ((x, y) -> leq(y, x)), narrow);
      fpd match {
      | (While(
        b_,
        _sb,
        ad @ AbstractState(_at, atP, _af, _afP, _es, _br, _brP),
      )) ->
        /* update loop body after convergence of loop invariant */
        sb_ = sb.abstractInterpreter(env, b.test(env, atP));
        While(b_, sb_, ad)
      | _ ->
        invariant_violation("abstractInterpreter: incorrect while transformer")
      }

    | StmtList(sl, AbstractState(at, _atP, af, _afP, es, br, _brP)) ->
      (sl_, atP_, afP_, brP_) = static::abstractInterpreterStmtList(
        env,
        sl,
        r0,
      );
      StmtList(sl_, AbstractState(at, atP_, af, afP_, es, br, brP_))
    }
  }

  static private fun abstractInterpreterStmtList<
    AP: AbstractProperty,
    AD: AbstractDomain<AP>,
  >(
    env: Env<AP, AD>,
    sl: List<Tree<AbstractState<AP, AD>>>,
    r0: AD,
  ): (List<Tree<AbstractState<AP, AD>>>, AD, AD, AD) {
    sl match {
    | List.Nil() -> (List[], r0, r0, (env.bot()))
    | List.Cons(s, List.Nil()) ->
      s_ = s.abstractInterpreter(env, r0);
      (List[s_], s_.property_at(), s_.property_after(), s_.property_break())
    | List.Cons(s, sl_) ->
      (sl__, atP_, afP__, brP__) = static::abstractInterpreterStmtList(
        env,
        sl_,
        r0,
      );
      s_ = s.abstractInterpreter(env, afP__);
      brP = s_.property_break().join(brP__);
      (List.Cons(s_, sl__), atP_, s_.property_after(), brP)
    }
  }
}
