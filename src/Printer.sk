fun string_of_aexpr(a: AExpr): String {
  a match {
  | Num(i) -> i.toString()
  | Variable(v) -> v
  | Minus(a1, a2) ->
    "(" + string_of_aexpr(a1) + " - " + string_of_aexpr(a2) + ")"
  | Plus(a1, a2) ->
    "(" + string_of_aexpr(a1) + " + " + string_of_aexpr(a2) + ")"
  }
}

fun print_aexpr(a: AExpr): void {
  print_raw(string_of_aexpr(a))
}

fun string_of_bexpr(a: BExpr): String {
  a match {
  | Lt(a1, a2) -> "(" + string_of_aexpr(a1) + " < " + string_of_aexpr(a2) + ")"
  | Eq(a1, a2) -> "(" + string_of_aexpr(a1) + " == " + string_of_aexpr(a2) + ")"
  | Neq(a1, a2) ->
    "(" + string_of_aexpr(a1) + " != " + string_of_aexpr(a2) + ")"
  | Gt(a1, a2) -> "(" + string_of_aexpr(a1) + " > " + string_of_aexpr(a2) + ")"
  | Nand(b1, b2) ->
    "(" + string_of_bexpr(b1) + " nand " + string_of_bexpr(b2) + ")"
  }
}

fun print_bexpr(b: BExpr): void {
  print_raw(string_of_bexpr(b))
}

fun print_tree<T>(s: Tree<T>): void {
  s match {
  | Prog(sl, _l) ->
    print_treelist(sl);
    print_newline()
  | Assign(v, a, _l) ->
    print_raw("" + v + " = ");
    print_aexpr(a);
    print_raw("; ")
  | EmptyStmt _ -> print_raw("; ")
  | If(b, st, _l) ->
    print_raw("(if ");
    print_bexpr(b);
    print_raw(" ");
    print_tree(st);
    print_raw(") ")
  | IfElse(b, st, se, _l) ->
    print_raw("(if ");
    print_bexpr(b);
    print_raw(" ");
    print_tree(st);
    print_raw(" else ");
    print_tree(se);
    print_raw(") ")
  | While(b, st, _l) ->
    print_raw("(while ");
    print_bexpr(b);
    print_raw(" ");
    print_tree(st);
    print_raw(") ")
  | Break _ -> print_raw("break; ")
  | StmtList(sl, _l) ->
    print_raw("{ ");
    print_treelist(sl);
    print_raw("} ")
  }
}

fun print_treelist<T>(sl: List<Tree<T>>): void {
  sl match {
  | List.Nil() -> void
  | List.Cons(s, List.Nil()) -> print_tree(s)
  | List.Cons(s, sl_) ->
    print_treelist(sl_);
    print_tree(s) /* nodes in inverse order */
  }
}

fun string_of_label(l: Label): String {
  "l" + l.toString()
}

fun print_label(l: Label): void {
  print_raw(string_of_label(l) + ": ")
}

fun bool_to_string(b: Bool): String {
  if (b) "tt" else "ff"
}

const labelmargin: Int = 60;

fun print_space(m: Int): void {
  for (_ in Range(0, m)) {
    print_raw(" ");
  }
}

fun print_margin(m: Int): void {
  print_space(labelmargin + m + 1)
}

fun print_labelling<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: AbstractState<AP, AD>,
  m: Int,
): void {
  x match {
  | AbstractState(at, atP, af, afP, es, br, brP) ->
    s =
      "<" +
      string_of_label(at) +
      ":" +
      atP +
      "; " +
      string_of_label(af) +
      ":" +
      afP +
      "; " +
      bool_to_string(es) +
      "; " +
      string_of_label(br) +
      ":" +
      brP +
      ">";
    print_raw(s);
    if (s.length() < labelmargin) {
      print_space(labelmargin - (s.length()) + 1)
    } else {
      print_space(m)
    }
  }
}

fun print_at<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: AbstractState<AP, AD>,
): void {
  x match {
  | AbstractState(at, _atP, _af, _afP, _es, _br, _brP) -> print_label(at)
  }
}

fun print_after<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: AbstractState<AP, AD>,
): void {
  x match {
  | AbstractState(_at, _atP, af, _afP, _es, _br, _brP) -> print_label(af)
  }
}

fun print_labelled_node<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  s: Tree<AbstractState<AP, AD>>,
  m: Int,
): void {
  s match {
  | Prog(sl, ls) ->
    print_raw("Prog: (begin Stmtlist)\n");
    print_labelling(ls, m);
    print_newline();
    print_labelled_nodelist(sl, (m + 3));
    print_margin(m);
    print_after(ls);
    print_newline();
    print_raw("Prog: (end Stmtlist)\n")
  | Assign(v, a, ls) ->
    print_raw("Assign:\n");
    print_labelling(ls, m);
    print_at(ls);
    print_raw("" + v + " = ");
    print_aexpr(a);
    print_raw("; ")
  | EmptyStmt(ls) ->
    print_raw("Emptystmt:\n");
    print_labelling(ls, m);
    print_at(ls);
    print_raw("; ")
  | If(b, st, ls) ->
    print_raw("If:\n");
    print_labelling(ls, m);
    print_raw("(if ");
    print_at(ls);
    print_bexpr(b);
    print_newline();
    print_labelled_node(st, (m + 3));
    print_raw(") ")
  | IfElse(b, st, se, ls) ->
    print_raw("Ifelse:\n");
    print_labelling(ls, m);
    print_raw("(if ");
    print_at(ls);
    print_bexpr(b);
    print_newline();
    print_labelled_node(st, (m + 3));
    print_newline();
    print_margin(m);
    print_raw(" else ");
    print_newline();
    print_labelled_node(se, (m + 3));
    print_raw(") ")
  | While(b, sb, ls) ->
    print_raw("While:\n");
    print_labelling(ls, m);
    print_raw("(while ");
    print_at(ls);
    print_bexpr(b);
    print_newline();
    print_labelled_node(sb, (m + 3));
    print_raw(") ")
  | Break(ls) ->
    print_raw("Break:\n");
    print_labelling(ls, m);
    print_at(ls);
    print_raw("break; ")
  | StmtList(sl, ls) ->
    print_raw("Stmtlist: (begin)\n");
    print_labelling(ls, m);
    print_raw("{\n");
    {
      print_labelled_nodelist(sl, (m + 3));
      print_margin(m);
      print_raw("} \n");
      print_raw("Stmtlist: (end)\n")
    }
  }
}

fun print_labelled_nodelist<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  sl: List<Tree<AbstractState<AP, AD>>>,
  m: Int,
): void {
  sl match {
  | List.Nil() -> void
  | List.Cons(s, List.Nil()) ->
    print_labelled_node(s, m);
    print_newline()
  | List.Cons(s, sl_) ->
    print_labelled_nodelist(sl_, m);
    print_labelled_node(s, m);
    print_newline() /* nodes in inverse order */
  }
}

fun print_invariant_at<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: AbstractState<AP, AD>,
): void {
  x match {
  | AbstractState(_at, atP, _af, _afP, _es, _br, _brP) ->
    print_raw((atP.toString()) + " ")
  }
}

fun print_invariant_after<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  x: AbstractState<AP, AD>,
): void {
  x match {
  | AbstractState(_at, _atP, _af, afP, _es, _br, _brP) ->
    print_raw((afP.toString()) + " ")
  }
}

fun print_invariant_node<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  s: Tree<AbstractState<AP, AD>>,
  m: Int,
): void {
  print_space(m);

  s match {
  | Prog(sl, ls) ->
    print_invariant_nodelist(sl, m);
    print_after(ls);
    print_invariant_after(ls);
    print_newline()
  | Assign(v, a, ls) ->
    print_at(ls);
    print_invariant_at(ls);
    print_raw("" + v + " = ");
    print_aexpr(a);
    print_raw("; ");
    print_newline()
  | EmptyStmt(ls) ->
    print_at(ls);
    print_invariant_at(ls);
    print_raw("; ");
    print_newline()
  | If(b, st, ls) ->
    print_raw("if ");
    print_at(ls);
    print_bexpr(b);
    print_invariant_at(ls);
    print_newline();
    print_invariant_node(st, (m + 3))
  | IfElse(b, st, se, ls) ->
    print_raw("if ");
    print_at(ls);
    print_bexpr(b);
    print_raw(" ");
    print_invariant_at(ls);
    print_newline();
    print_invariant_node(st, (m + 3));
    print_space(m);
    print_raw(" else ");
    print_newline();
    print_invariant_node(se, (m + 3))
  | While(b, sb, ls) ->
    print_raw("while ");
    print_at(ls);
    print_bexpr(b);
    print_raw(" ");
    print_invariant_at(ls);
    print_newline();
    print_invariant_node(sb, (m + 3))
  | Break(ls) ->
    print_at(ls);
    print_invariant_at(ls);
    print_raw("break; ");
    print_newline()
  | StmtList(sl, _ls) ->
    print_raw("{");
    print_newline();
    print_invariant_nodelist(sl, (m + 3));
    print_space(m);
    print_raw("}");
    print_newline()
  }
}

fun print_invariant_nodelist<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  sl: List<Tree<AbstractState<AP, AD>>>,
  m: Int,
): void {
  sl match {
  | List.Nil() -> void
  | List.Cons(s, List.Nil()) -> print_invariant_node(s, m)
  | List.Cons(s, sl_) ->
    print_invariant_nodelist(sl_, m);
    print_invariant_node(s, m) /* nodes in inverse order */
  }
}
