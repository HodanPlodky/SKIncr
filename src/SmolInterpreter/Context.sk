type Env = mutable List<mutable Scope> ;


mutable base class Scope {
  children =
    | ModuleScope(mapping : mutable Map<EVar, mutable Val>, name : String) // module-name
    | FunctionScope(mapping : mutable Map<EVar, mutable Val>, name : String) // function-name + a position (later)
    | BlockScope(mapping : mutable Map<EVar, mutable Val>) // a position (later)
}

fun mapping(scope: mutable Scope): mutable Map<EVar, mutable Val> {
  scope match {
    | ModuleScope(m, _)
    | FunctionScope(m, _)
    | BlockScope(m) -> m
  }
}


fun mapempty() : Map<EVar, Val> {
  Map::createFromIterator(List[].values());
}


fun lookup(var : EVar, env : Env) : mutable Val {
  optVal: Option<mutable Val> = None() ;
  
  _ = env.find((scope : mutable Scope) ->
    scope match {
      | ModuleScope(mapping, _)
      | FunctionScope(mapping, _)
      | BlockScope(mapping) ->
        // try to find it in the mapping
        mapping.maybeGet(var) match {
          | None() -> false
          | Some(val) -> {
            !optVal = Some(val) ;
            true
          }
        }
    });

  optVal.fromSome(`Interpreter Error: Didn't find a variable ${var.toString()}`) // TODO: probably have a custom error handling
}


fun putIntoLocalScope(var : EVar, val : mutable Val, env : Env) : void {
  env match {
    | List.Cons(ModuleScope(mapping, _), _)
    | List.Cons(FunctionScope(mapping, _), _)
    | List.Cons(BlockScope(mapping), _) -> mapping.set(var, val)
    | List.Nil() -> invariant_violation("Runtime Error: empty environment - should not happen!")
  }
}


fun updateSlot(var : EVar, env : Env, val : mutable Val) : mutable Val {
  maybeMapping : Option<mutable Map<EVar, mutable Val>> = None();

  _ = env.find((scope : mutable Scope) ->
        scope match {
          | BlockScope(mapping) ->
            // try to find it in the mapping
            // I should not be able to find it, if I find it, it means it's a local constant and those can't be reset!
            mapping.maybeGet(var) match {
              | None() -> false
              | Some(_) -> invariant_violation(`[INTERPRETER ERROR]: You tried to 'set!' a local constant '${var}'. That is not allowed.`)
            }
          | FunctionScope(mapping, fname) ->
            // try to find it in the mapping
            // I should not be able to find it, if I find it, it means it's a local constant and those can't be reset!
            mapping.maybeGet(var) match {
              | None() -> false
              | Some(_) -> invariant_violation(`[INTERPRETER ERROR]: You tried to 'set!' a function parameter '${var}'. That is not allowed! The parameter '${var}' comes from the function '${fname}'.`)
            }

          | ModuleScope(mapping, _) ->
            // try to find it in the mapping
            mapping.maybeGet(var) match {
              | None() -> false
              | Some(_) -> {
                !maybeMapping = Some(mapping);
                true
              }
            }
        });

  maybeMapping match {
    | None() -> invariant_violation(`Interpreter Error: Tried to update a variable '${var}' but it is not in the scope.`)
    | Some(mapping) -> mapping.set(var, val)
  };

  val
}