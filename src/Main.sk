fun main(): void {  
  text = "";
  loop {
    read_line() match {
    | None() -> break void
    | Some(line) -> !text = text + line
    }
  };
  
  lexer = Lexer::create(text);

  // pos = Some(0);
  // 
  // loop {
  //   lexer.token(pos.fromSome("impossible!")) match {
  //     | (npos, Some(tok)) -> {
  //       !pos = Some(npos); // npos;
  //       print_string(`${tok}`);
  //     }
  //     | _ -> {
  //       print_string("something bad happened");
  //       break void;
  //     }
  //   }
  // };

  p = Parser::create(lexer);
  
  _mod = p.parseMod().result;

  // Printing what I parsed takes too much space.
  // print_string(`Parsed:\n\n${mod}`);
  
  // can't do try-catch because in embedded mode, whatever that means (?)
  // try {
  //   _m = p.parseMod()
  // }
  // catch {
  //   | err -> `${err}`
  // };
}
