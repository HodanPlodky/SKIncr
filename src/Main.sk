// The entry point for the interpreter and analyzer.
//
// main() expects a list of files, one of which should be module `Main`, with a function
// `main`. All imported modules should be available. No module should appear more than once.
//
fun main(): void {
	paths = arguments();
	if (paths.size() == 0) {
		 test();
		 return void;
	};
  _files = paths.map(p -> {
	  r = Reader::create(p);
  	f = r.parse();
		if (r.ok) { print_string(f.toString()); } else { r.error_report(); };
	  r
 });
}

fun test(): void {
	good_test("./tests/good/1/main.sm");
	good_test("./tests/good/2/main.sm");
	good_test("./tests/good/3/main.sm");
	bad_test("./tests/bad/1.sm", true);
	bad_test("./tests/bad/2.sm", false);
	bad_test("./tests/bad/3.sm", true);
}

fun good_test(p: String): void {
	r = Reader::create(p);
 	_f = r.parse();
  if (r.ok) { print_string("."); } else { r.error_report(); };
}

fun bad_test(p: String, verbose: Bool): void {
	r = Reader::create(p);
 	_f = r.parse();
   if (r.ok) {
	 		print_string(`File ${r.path} should have erred.`);
			return void;
	};
	if (verbose) { r.error_report(); } else { print_string("."); };
}
