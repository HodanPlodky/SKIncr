trait AbstractProperty extends Show {
  fun isLe(a2: inst): Bool;
  fun isEq(b: inst): Bool;
  static fun bot(): inst;
  static fun top(): inst;
  fun join(a2: inst): inst;
  fun meet(a2: inst): inst;
  static fun initialP(): inst;
  static fun propertyofinteger(i: Int): inst;
  fun -(a2: inst): inst;
  fun minusm1(x: inst, y: inst): (inst, inst);
  fun +(a2: inst): inst;
  fun plusm1(x: inst, y: inst): (inst, inst);
  fun <=(a2: inst): (inst, inst);
  fun >=(a2: inst): (inst, inst);
  fun <(ly_hy: inst): (inst, inst);
  fun >(ly_hy: inst): (inst, inst);
  fun ==(a2: inst): (inst, inst);
  fun !=(ly_hy: inst): (inst, inst);
  fun widen(a2: inst): inst;
  fun narrow(a2: inst): inst;
  readonly fun toString(): String;
}

trait AbstractDomain<AP: AbstractProperty> extends Show {
  static fun create(List<(Variable, AP)>): inst;
  fun iterate(n: Int, f: inst -> inst): inst;
  fun ==(r2: inst): Bool;
  fun <=(r2: inst): Bool;
  fun join(r2: inst): inst;
  fun meet(r2: inst): inst;
  fun widen(r2: inst): inst;
  fun narrow(r2: inst): inst;
  fun assoc(v: Variable): AP;
  fun assign(env: Env<AP, inst>, x: Variable, a: AExpr): inst;
  fun update(x: Variable, v: AP): inst;
  readonly fun toString(): String;
}

value class ListDomain<AP: AbstractProperty>(
  vars: List<(Variable, AP)>,
) uses Show, AbstractDomain<AP> {
  static fun create(values: List<(Variable, AP)>): this {
    ListDomain(values)
  }

  fun iterate(n: Int, f: this -> this): this {
    a: this = this;
    if (n > 1) {
      f(a).iterate(n - 1, f)
    } else {
      x = a.narrow(f(a));
      if (a <= x) a else x.iterate(n, f)
    }
  }

  fun ==(r2: this): Bool {
    r1: this = this;
    r1 <= r2 && r2 <= r1
  }

  fun <=(r2: this): Bool {
    r1: this = this;
    static::leqList(r1.toList(), r2.toList())
  }

  private static fun leqList(
    r1: List<(Variable, AP)>,
    r2: List<(Variable, AP)>,
  ): Bool {
    (r1, r2) match {
    | (List.Nil(), List.Nil()) -> true
    | (List.Cons((x1, a1), r_1), List.Cons((x2, a2), r_2)) ->
      if (x1 == x2) (a1.isLe(a2)) && static::leqList(r_1, r_2) else {
        invariant_violation(
          "abstractDomain.leq: unsorted environments(" + x1 + "<>" + x2 + ")",
        )
      }
    | (_, _) ->
      invariant_violation("abstractDomain.leq: environments of inequal lengths")
    }
  }

  fun join(r2: this): this {
    static::map(this, r2, (x, y) -> x.join(y))
  }

  fun meet(r2: this): this {
    static::map(this, r2, (x, y) -> x.meet(y))
  }

  fun widen(r2: this): this {
    static::map(this, r2, (x, y) -> x.widen(y))
  }

  fun narrow(r2: this): this {
    static::map(this, r2, (x, y) -> x.narrow(y))
  }

  fun assoc(v: Variable): AP {
    static::assocList(v, this.vars)
  }

  static private fun assocList<T1: Orderable & Show, T2>(
    v: T1,
    r: List<(T1, T2)>,
  ): T2 {
    r match {
    | List.Nil() -> invariant_violation("Variable not found: " + v)
    | List.Cons((x, y), rl) ->
      if (x == v) return y;
      static::assocList(v, rl)
    }
  }

  static private fun remove_assocList<T1: Orderable, T2>(
    varName: T1,
    r: List<(T1, T2)>,
  ): List<(T1, T2)> {
    r match {
    | List.Nil() -> List.Nil()
    | List.Cons(h @ (x, _), rl) ->
      if (x == varName) {
        static::remove_assocList(varName, rl);
      } else {
        List.Cons(h, static::remove_assocList(varName, rl))
      }
    }
  }

  fun update(x: Variable, v: AP): this {
    r = this.vars;
    ListDomain(
      List.Cons((x, v), static::remove_assocList(x, r)).sortedBy(x ~> x.i0),
    )
  }

  fun assign(env: Env<AP, this>, x: Variable, a: AExpr): this {
    this.update(x, a.eval(env, this))
  }

  static fun map(r1: this, r2: this, f: (AP, AP) -> AP): this {
    ListDomain(static::mapList(r1.toList(), r2.toList(), f))
  }

  static fun mapList(
    r1: List<(Variable, AP)>,
    r2: List<(Variable, AP)>,
    f: (AP, AP) -> AP,
  ): List<(Variable, AP)> {
    (r1, r2) match {
    | (List.Nil(), List.Nil()) -> List[]
    | (List.Cons((x1, a1), r_1), List.Cons((x2, a2), r_2)) ->
      if (x1 == x2) {
        List.Cons((x1, f(a1, a2)), static::mapList(r_1, r_2, f))
      } else {
        invariant_violation(
          "abstractDomain.join: missformed environments (" +
            x1 +
            "<>" +
            x2 +
            ")",
        )
      }
    | (_, _) ->
      invariant_violation(
        "abstractDomain.join: environments of inequal lengths",
      )
    }
  }

  fun toList(): List<(Variable, AP)> {
    this.vars
  }

  fun toString(): String {
    r: this = this;
    "{" + (static::stringofaPRec(r.toList())) + "}"
  }

  static private fun stringofaPRec(r: List<(Variable, AP)>): String {
    r match {
    | List.Nil() -> ""
    | List.Cons((x, v), List.Nil()) -> "" + x + ":" + v
    | List.Cons((x, v), r_) ->
      "" + x + ":" + v + "; " + (static::stringofaPRec(r_))
    }
  }
}

class Env<AP: AbstractProperty, AD: AbstractDomain<AP>>(
  ap: Concrete<AP>,
  ad: Concrete<AD>,
  program_variables: List<Variable> = List[],
) {
  fun initialP(): AD {
    initialBinding = x -> (x, (this.ap)::initialP());
    this.ad::create(this.program_variables.map(initialBinding))
  }

  fun bot(): AD {
    this.ad::create(this.program_variables.map(x -> (x, (this.ap)::bot())))
  }

  fun top(): AD {
    this.ad::create(this.program_variables.map(x -> (x, (this.ap)::top())))
  }
}

extension base class AExpr {
  fun eval<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    r: AD,
  ): AP {
    a: AExpr = this;
    a match {
    | Num(i) ->
      if (r == env.bot()) env.ap::bot() else {
        env.ap::propertyofinteger(i)
      }
    | x @ Variable _ -> if (r == env.bot()) (env.ap::bot()) else r.assoc(x)
    | Minus(a1, a2) ->
      if (r == env.bot()) env.ap::bot() else {
        v1 = a1.eval(env, r);
        v2 = a2.eval(env, r);
        (v1 - v2)
      }
    | Plus(a1, a2) ->
      if (r == env.bot()) env.ap::bot() else {
        v1 = a1.eval(env, r);
        v2 = a2.eval(env, r);
        (v1 + v2)
      }
    }
  }

  /* "evalam1 a x r" restricts the precondition "r" to those environments in which the
     arithmetic expression "a" may return a value in the set of values "x" (considered as
     a postcondition). */

  fun evalam1<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    x: AP,
    r: AD,
  ): AD {
    a: AExpr = this;
    a match {
    | Num(i) ->
      v = (env.ap::propertyofinteger(i)).meet(x);
      if ((v.isEq((env.ap::bot())))) env.bot() else r
    | y @ Variable _ ->
      v = r.assoc(y).meet(x);
      if ((v.isEq(env.ap::bot()))) env.bot() else {
        r.update(y, v)
      }
    | Minus(a1, a2) ->
      v1 = a1.eval(env, r);
      v2 = a2.eval(env, r);
      (x1, x2) = x.minusm1(v1, v2);
      a1.evalam1(env, x1, r).meet(a2.evalam1(env, x2, r))
    | Plus(a1, a2) ->
      (x1, x2) = x.plusm1(a1.eval(env, r), a2.eval(env, r));
      a1.evalam1(env, x1, r).meet(a2.evalam1(env, x2, r))
    }
  }
}

extension base class BExpr {
  fun basic_test<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    r: AD,
  ): AD {
    b: BExpr = this;
    b match {
    | Lt(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) < a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Gt(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) > a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Eq(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) == a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Neq(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) != a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))

    | Nand(b1, b2) ->
      r_ = b1
        .basic_test(env, r)
        .meet(b2.notbasic_test(env, r))
        .join(b1.notbasic_test(env, r).meet(b2.basic_test(env, r)));
      r_.join(b1.notbasic_test(env, r).meet(b2.notbasic_test(env, r)))
    }
  }

  fun notbasic_test<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    r: AD,
  ): AD {
    b: BExpr = this;
    b match {
    | Lt(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) >= a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Gt(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) <= a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Eq(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) != a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Neq(a1, a2) ->
      (v1, v2) = (a1.eval(env, r) == a2.eval(env, r));
      a1.evalam1(env, v1, r).meet(a2.evalam1(env, v2, r))
    | Nand(b1, b2) -> b1.basic_test(env, r).meet(b2.basic_test(env, r))
    }
  }

  fun test<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    r: AD,
  ): AD {
    b: BExpr = this;
    r.iterate(3, x -> b.basic_test(env, x))
  }

  fun nottest<AP: AbstractProperty, AD: AbstractDomain<AP>>(
    env: Env<AP, AD>,
    r: AD,
  ): AD {
    b: BExpr = this;
    r.iterate(3, x -> b.notbasic_test(env, x))
  }
}
