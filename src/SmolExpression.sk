base class Expr {
  children =
  | ENum(Int)
  | EList(List<EVar>) // Expr or EVar?
  | EOp(Op)
  | ECall(EVar, List<EVar>)
  | EIf(EVar, Expr, Expr)
  | EConst(EVar, Expr) // we only have local constants
  | EBlock(List<Expr>)
  | EWhile(Expr, Expr)
}


class EVar(name: String) extends Expr uses Orderable, Show {
  fun toString(): String {
    this.name
  }
}


base class Op {
  children =
  | OAdd(EVar, EVar)    // +
  | OSub(EVar, EVar)    // -
  | OEq(EVar, EVar)     // =
  | OLeT(EVar, EVar)    // <
  | OWrite(EVar)        // write!
  | ORead(EVar)         // read!
  | OSet(EVar, Expr)    // set!
}
