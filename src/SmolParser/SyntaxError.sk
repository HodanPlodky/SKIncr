module Parser;


base class SyntaxError{ ctxt : String, at : Int } extends Exception {
  children =
    | TokenMismatch{ expected : Token, saw : Token }
    | NotIdentifier{ saw : Token }
    | UnexpectedEOI{ expected : Token }
    | UnexpectedEOIWhen{ parsing : String }
    | UnexpectedTokenWhen{ parsing : String, saw : Token }
    | IllegalApplication{ msg : String }
    | UnknownToken{ s : Char }


  fun toString(): String {
    this match {
      | TokenMismatch{ expected, saw } -> {
        `I was expecting '${expected}' but saw '${saw}'.` +
        `\n` +
        `When I was parsing ${this.ctxt}.`
      }
      | NotIdentifier{ saw } -> {
        `I was expecting to read an identifier, but saw '${saw}'.` +
        `\n` +
        `When I was parsing ${this.ctxt}`
      }
      | UnexpectedEOI{ expected } -> {
        `I was expecting to read '${expected}' but the input ended inexpectedly.` +
        `\n` +
        `When I was parsing ${this.ctxt}`
      }
      | UnexpectedEOIWhen{ parsing } -> {
        `I was trying to parse ${parsing} but the input ended unexpectedly.` +
        `\n` +
        `When I was parsing ${this.ctxt}`
      }
      | UnexpectedTokenWhen{ parsing, saw } -> {
        `I was trying to parse ${parsing} but saw the token '${saw}' which should not be there.` +
        `\n` +
        `When I was parsing ${this.ctxt}.`
      }
      | IllegalApplication{ msg } -> {
        `I was trying to parse a function application but saw ${msg}.\n` +
        `\n` +
        `When I was parsing ${this.ctxt}.`
      }
      | UnknownToken{ s } -> {
        `I saw unknown symbol '${s}'.\n`
      }
    }
  }
}


fun raise<T>(err: SyntaxError, lexer: Lexer): T {
  input: Vector<Char> = lexer.content;
  // now print a small amount of tokens leading to the error
  begin = max(0, err.at - 30);
  end = err.at;
  slice = String::fromChars(input.slice(begin, end).toArray());

  arr = Vector::mfill(end - begin - 1, ' ');
  arr.push('^');
  arrows = String::fromChars(arr.toArray());

  print_string(`[ERROR]\n'${err}'\n`);
  print_string(`${slice}`);
  print_string(`${arrows}`);
  throw err;
}


module end;